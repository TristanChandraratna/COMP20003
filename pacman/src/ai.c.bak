#include <time.h>
#include <stdlib.h>
#include <limits.h>
#include <math.h>


#include "ai.h"
#include "utils.h"
#include "priority_queue.h"


struct heap h;

float get_reward( node_t* n );

/**
 * Function called by pacman.c
*/
void initialize_ai(){
	heap_init(&h);
}

/**
 * function to copy a src into a dst state
*/
void copy_state(state_t* dst, state_t* src){
	//Location of Ghosts and Pacman
	memcpy( dst->Loc, src->Loc, 5*2*sizeof(int) );

    //Direction of Ghosts and Pacman
	memcpy( dst->Dir, src->Dir, 5*2*sizeof(int) );

    //Default location in case Pacman/Ghosts die
	memcpy( dst->StartingPoints, src->StartingPoints, 5*2*sizeof(int) );

    //Check for invincibility
    dst->Invincible = src->Invincible;
    
    //Number of pellets left in level
    dst->Food = src->Food;
    
    //Main level array
	memcpy( dst->Level, src->Level, 29*28*sizeof(int) );

    //What level number are we on?
    dst->LevelNumber = src->LevelNumber;
    
    //Keep track of how many points to give for eating ghosts
    dst->GhostsInARow = src->GhostsInARow;

    //How long left for invincibility
    dst->tleft = src->tleft;

    //Initial points
    dst->Points = src->Points;

    //Remiaining Lives
    dst->Lives = src->Lives;   
}

node_t* create_init_node( state_t* init_state ){
	node_t * new_n = (node_t *) malloc(sizeof(node_t));
	new_n->parent = NULL;	
	new_n->priority = 0;
	new_n->depth = 0;
	new_n->num_childs = 0;
	copy_state(&(new_n->state), init_state);
	new_n->acc_reward =  get_reward( new_n );
	return new_n;
	
}

float heuristic( node_t* n ){
	float h = 0;
    
    // h(n) = i('10 for fruit') 
    //           - l('10 for life lost') 
    //           - g('100 for final life lost')
	//FILL IN MISSING CODE
    
    state_t *s;
    copy_state(s, &n->state);
    
    //find pacman's next space
    int nextSpace = s->Level[s->Loc[0][0] + s->Dir[0][0]][s->Loc[0][0] + s->Dir[0][1]];
    int pacmanNextLoc[] = {s->Loc[0][0] + s->Dir[0][0],s->Loc[0][0] + s->Dir[0][1]};
    int blinkyNextLoc[] = {s->Loc[1][0] + s->Dir[1][0],s->Loc[1][0] + s->Dir[1][1]};
    int pinkyNextLoc[] = {s->Loc[2][0] + s->Dir[2][0],s->Loc[2][0] + s->Dir[2][1]};
    int inkyNextLoc[] = {s->Loc[3][0] + s->Dir[3][0],s->Loc[3][0] + s->Dir[3][1]};
    int clydeNextLoc[] = {s->Loc[4][0] + s->Dir[4][0],s->Loc[4][0] + s->Dir[4][1]};
    
    int meetGhost = 0;
    
    if(nextSpace == 3){h += 10;} // When the next space is to eat a fruit
    else if(nextSpace == 5 || 
            (pacmanNextLoc[0] == blinkyNextLoc[0] 
             && pacmanNextLoc[1] == blinkyNextLoc[1])){meetGhost=1;}
    else if(nextSpace == 6 || 
            (pacmanNextLoc[0] == blinkyNextLoc[0] 
             && pacmanNextLoc[1] == blinkyNextLoc[1])){meetGhost=1;}
    else if(nextSpace == 7 || 
            (pacmanNextLoc[0] == blinkyNextLoc[0] 
             && pacmanNextLoc[1] == blinkyNextLoc[1])){meetGhost=1;}
    else if(nextSpace == 8 || 
            (pacmanNextLoc[0] == blinkyNextLoc[0] 
             && pacmanNextLoc[1] == blinkyNextLoc[1])){meetGhost=1;}

    if(meetGhost){
        if(s->Lives == 1){
            h -= 100;
        }
        else{
            h -= 10;
        }
    }

    free(s);
    
	return h;
}

float get_reward( node_t* n ){
	float reward = 0;
	
	//FILL IN MISSING CODE
    //r(n) = (h(n) + score(n) − score(nP arent)) × γd
    
    reward += heuristic(n);
    
    reward += n->acc_reward;
    
    if(n->parent){
        reward -= n->parent->acc_reward;
    }
    
	float discount = pow(0.99,n->depth);
   	
	return discount * reward;
}

/**
 * Apply an action to node n and return a new node resulting from executing the action
*/
bool applyAction(node_t* n, node_t** new_node, move_t action ){
	bool changed_dir = false;

    //FILL IN MISSING CODE
    // n is parent, new_node is next node
    (*new_node)->parent = n;
    n->num_childs += 1;
    (*new_node)->priority = n->priority - 1;
    (*new_node)->depth = n->depth + 1;
    
    changeDirection(*new_node, action);
    
    (*new_node)->acc_reward = get_reward(*new_node);
    
    changed_dir = execute_move_t( &((*new_node)->state), action );	

	return changed_dir;
}

/**
 * Find best action by building all possible paths up to budget
 * and back propagate using either max or avg
 */
move_t get_next_move( state_t init_state, int budget,
                     propagation_t propagation, char* stats ){
	move_t best_action = rand() % 4;

	float best_action_score[4];
	for(unsigned i = 0; i < 4; i++)
	    best_action_score[i] = INT_MIN;

	unsigned generated_nodes = 0;
	unsigned expanded_nodes = 0;
	unsigned max_depth = 0;

	//Add the initial node
	node_t* parent = create_init_node( &init_state );
	
	//Use the max heap API provided in priority_queue.h
	heap_push(&h,parent);
    
	best_action = GraphSearch(&h, parent, propagation, budget);
	
	
	sprintf(stats, "Max Depth: %d Expanded nodes: %d  Generated nodes: %d\n",max_depth,expanded_nodes,generated_nodes);
	
	if(best_action == left)
		sprintf(stats, "%sSelected action: Left\n",stats);
	if(best_action == right)
		sprintf(stats, "%sSelected action: Right\n",stats);
	if(best_action == up)
		sprintf(stats, "%sSelected action: Up\n",stats);
	if(best_action == down)
		sprintf(stats, "%sSelected action: Down\n",stats);

	sprintf(stats, "%sScore Left %f Right %f Up %f Down %f",stats,best_action_score[left],best_action_score[right],best_action_score[up],best_action_score[down]);
	return best_action;
}

move_t GraphSearch(struct heap *Graph, node_t* parent, propagation_t propagation, int budget){
    move_t best_action = 0;
    
    node_t explored[budget];
    int expCntr = 0;
    struct heap* frontier;
    heap_init(frontier);
    heap_push(frontier, parent);
    
    
    
    while(frontier->count != 0 && budget > 0){
        node_t *currNode = heap_delete(frontier);
        
        for(int i = 0; i < 4; i++){
            node_t *nextNode = create_init_node(&parent->state);
            if(applyAction(parent, &nextNode, i)){
                heap_push(frontier,nextNode);
                heap_push(Graph,nextNode);
                
                
                // backPropagation(nextNode, propagation_t propagation, int budget);
                
                /*
                propagateBackScoreToFirstAction(newNode)
                if lostLife(newNode)
                then
                    free(newNode);
                else
                    frontier.add(newNode)
    `           */
            }
        }
        explored[expCntr++] = *currNode;
        budget -= 1;
    }
    
    return best_action;
}

/*
int backPropagation(struct heap* frontier, node_t explored[], node_t* node, propagation_t propagation, int budget){
    budget -= 1;
    for(int i = 0; i < 4; i++){
        changeDirection(node, i);
        
        
    }
    
    return 0;
}
*/
void changeDirection(node_t* node, move_t move){
    if(move == 0){
        (node)->state.Dir[0][0] = 1;
        (node)->state.Dir[0][1] = 0;
    }
    else if(move == 1){
        (node)->state.Dir[0][0] = -1;
        (node)->state.Dir[0][1] = 0;
    }
    else if(move == 2){
        (node)->state.Dir[0][0] = 0;
        (node)->state.Dir[0][1] = 1;
    }
    else if(move == 3){
        (node)->state.Dir[0][0] = 0;
        (node)->state.Dir[0][1] = -1;
    }
}

/*
GraphSearch(Graph, start, budget)
1 node ← start
2 explored ← empty Array
3 frontier ← priority Queue Containing node Only
4 while frontier != empty
5 do
6   node ← frontier.pop()
7   explored.add(node)
8   if size(explored) < budget
9   then
10      for each APPLICABLE action a ∈ {Left, Right, Up, Down}
11      do
12          newNode ← applyAction(node)
13          propagateBackScoreToFirstAction(newNode)
14          if lostLife(newNode)
15          then
16              delete newNode
17          else
18              frontier.add(newNode)
19
20 freeMemory(explored)
21 bestAction ← select best action breaking ties randomly
22 return bestAction
*/




